<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2019-08-05T18:17:19+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Weeks of hacking can save you hours of planning | r-wos.org</title><subtitle>My home on the information super highway.</subtitle><entry><title type="html">I ain’t gonna work on Maggie’s farm no more</title><link href="http://0.0.0.0:4000/blog/imagineeasy" rel="alternate" type="text/html" title="I ain't gonna work on Maggie's farm no more" /><published>2014-06-24T00:00:00+00:00</published><updated>2014-06-24T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/imagineeasy</id><content type="html" xml:base="http://0.0.0.0:4000/blog/imagineeasy">&lt;p&gt;I had an exit interview at my old employer. It started with a
question from a HR person about what I liked and - maybe, even -
disliked about the company.&lt;/p&gt;

&lt;p&gt;After that, it consisted mainly of me telling the HR person “what I
&lt;em&gt;really&lt;/em&gt; disliked was X”, and the HR person responding that without
X, everything would soon end in chaos and destruction.  Never - so
much was clear - could a company function without X. Everyone does X,
and for good reason.&lt;/p&gt;

&lt;p&gt;Snippets, from memory:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Well, people could just not show up if we switched off the time
tracking system”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“How would the team lead know you did anything if he isn’t the only
one who can merge your code?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn’t have root on my workstation, for security reasons.&lt;/p&gt;

&lt;p&gt;I had, however, root on all web-servers. For one site, I did the
paypal integration, credit-card handling, &lt;em&gt;and&lt;/em&gt; invoice-generation. But
installing &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; - nope, had to call IT for that one. Too dangerous.&lt;/p&gt;

&lt;p&gt;We used svn, but with a branch-heavy git-like workflow. Either
of those is fine, but the combination is just maddening. Switching
to git was deemed too time-consuming. True: there is little time left if
every merge takes hours.&lt;/p&gt;

&lt;p&gt;I switched teams a lot in the three years I was there. I had good
team leads; and they left the company. I had bad team leads; those
tended to stay.  All of them where well-meaning, but that alone
doesn’t help much.&lt;/p&gt;

&lt;p&gt;This is a random assortment of boring anecdotes, because “random”
and “boring” is exactly what it was. It’s hard to describe the lack
of something. It’s easy to feel, though. I had a script that counted
the working hours backwards, until the end of my apprenticeship.&lt;/p&gt;

&lt;p&gt;It’s not that any single thing was &lt;em&gt;so&lt;/em&gt; bad that one just couldn’t
take it; it’s not that they were downright &lt;em&gt;evil&lt;/em&gt; (well, the CEO
spent one Christmas in jail, as a suspect for tax evasion, but it’s
not like we made land mines or something).&lt;/p&gt;

&lt;p&gt;It was the combination, the sum of it all. The continuous river
of bullshit, that never-ending smog of politics, and HR, and all
those stupid people with stupid titles, and stupid rules, in stupid
buildings, talking about stupid numbers in stupid excel sheets,
and stupid code monkeys, and stupid “senior engineers”, and stupid
“lead architects”, and the CEO’s white Porsche Cabrio parked on the
street I had to take to get to the tram, and all that for little money.&lt;/p&gt;

&lt;p&gt;I hated it.&lt;/p&gt;

&lt;p&gt;There are, of course, many companies like this. What I suspected,
but was not fully convinced of until last year, is that there are
also companies which are &lt;em&gt;not&lt;/em&gt; like this. At all.&lt;/p&gt;

&lt;p&gt;I’ve been lucky enough to work for &lt;a href=&quot;http://www.imagineeasy.com/&quot;&gt;one of them&lt;/a&gt;
for exactly one year now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://r-wos.org/media/github.png&quot; style=&quot;max-width: 100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And what can I tell you? It’s chaos and destruction, we don’t
have time tracking! We all have root on our workstations, it’s blood
everywhere. The walls are collapsing and it’s raining in, we have
automatic deployments. People are dying everywhere, we don’t have
any middle managers to tell them to breathe.&lt;/p&gt;

&lt;p&gt;It’s so empowering, and interesting, and fun and relaxed - it’s
fantastic.&lt;/p&gt;

&lt;p&gt;And there isn’t a collection of anecdotes here, because I don’t
even know where to start. The year here was
&lt;a href=&quot;https://github.com/easybiblabs/php-poppler-pdf&quot;&gt;so&lt;/a&gt;
&lt;a href=&quot;https://github.com/easybiblabs/window-opener&quot;&gt;full&lt;/a&gt;
&lt;a href=&quot;http://content.easybib.com/easybib-bibliography-creator-is-a-new-google-doc-add-on/&quot;&gt;of&lt;/a&gt;
&lt;a href=&quot;http://content.easybib.com/autocite-pdfs-of-your-research-sources/&quot;&gt;great&lt;/a&gt;
&lt;a href=&quot;http://content.easybib.com/easybib-is-now-mobile-responsive/&quot;&gt;things&lt;/a&gt;, and I
didn’t take notes.&lt;/p&gt;

&lt;p&gt;I didn’t have to.&lt;/p&gt;</content><author><name></name></author><summary type="html">I had an exit interview at my old employer. It started with a question from a HR person about what I liked and - maybe, even - disliked about the company.</summary></entry><entry><title type="html">NoUnderstand NoFlo</title><link href="http://0.0.0.0:4000/blog/noflo" rel="alternate" type="text/html" title="NoUnderstand NoFlo" /><published>2014-05-24T00:00:00+00:00</published><updated>2014-05-24T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/noflo</id><content type="html" xml:base="http://0.0.0.0:4000/blog/noflo">&lt;p&gt;Playing with &lt;a href=&quot;http://noflojs.org/&quot;&gt;NoFlo&lt;/a&gt; a bit, currently. It’s a flow-based
programming environment in JavaScript. It might not be apparent from this post
but I do quite like it. Data-flow
programming is probably not much of an improvement if you start with a sane
language. But since JavaScript is a rotten piece of shit all the way through,
NoFlo actually improves things considerably.&lt;/p&gt;

&lt;p&gt;I haven’t written enough stuff in it to know whether or not it’s
fit for doing real-world in-browser things, but it does look like
it. One of the nice things about it is that it lets you avoid writing
in continuation passing style, mostly. Again - in a sane language,
no one would do that anyway, but yeah. JavaScript.&lt;/p&gt;

&lt;p&gt;As to the flow-based part of it - a few comparisons immediately come to mind.
One of them might be CSP, or Go’s implementation of CSP. But I’m not a Go
programmer, so I can only compare it to that other system I know:
unix processes, as exposed by the unix shell.&lt;/p&gt;

&lt;p&gt;Obvious from the start: NoFlo is two-dimensional, the shell is 
one-dimensional. Now, that’s not strictly true - one can certainly arrange
unix processes in a two-dimensional pattern - but for this exercise, let’s only
consider the plain old one-dimensional unix pipeline.&lt;/p&gt;

&lt;p&gt;Say, something super-simple like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep '^a' | head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s where my gripes with NoFlo start, because I find it extremely difficult
to write even something simple like that in it.&lt;/p&gt;

&lt;p&gt;The naive translation of the program above into NoFlo might look something like
this (the syntax is a built-in DSL, which NoFlo can execute directly):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Read(filesystem/ReadFile) OUT -&amp;gt; IN Split(strings/SplitStr)
Split OUT -&amp;gt; IN Filter(strings/Filter) 
Filter OUT -&amp;gt; IN Head(packets/Range)
Head OUT -&amp;gt; IN Display(core/Output)

'^a' -&amp;gt; PATTERN Filter
'10' -&amp;gt; LENGTH Head

'/dev/stdin' -&amp;gt; IN Read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s more verbose, but that’s alright since that is obviously a side-effect of
being more organized (component names) and more flexible (multiple IO channels)
than the shell.&lt;/p&gt;

&lt;p&gt;The thing is that it’s not the same.&lt;/p&gt;

&lt;p&gt;In the unix shell version, &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; will terminate after it read and printed 10
lines. This will send a &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGPIPE&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;, which terminates &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;. In other
words, the following will terminate after 10 lines of output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(cat /usr/share/dict/words; cat) | grep '^a' | head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whereas the NoFlo program will keep running, blocked on reading from &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And not only will it keep running - &lt;em&gt;it will also not have printed anything&lt;/em&gt;.
Because - somehow - it’s not concurrent.&lt;/p&gt;

&lt;p&gt;To be fair - that is probably my fault.  There has to be a way to
write this in NoFlo so it prints the matching lines out as soon
as they are read. But it’s apparently not the default, and I can’t
find anything about this in the documentation.&lt;/p&gt;

&lt;p&gt;The fact that it doesn’t work out of the box is a bit weird&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;especially if you want to let non-experts like me write NoFlo
programs. Which, I think, is one of the goals of the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;First NoFlo program, first deadlock - what can we do? Well, we can certainly
simulate the SIGPIPE by just terminating the whole NoFlo program after ten
lines. This is impossible to implement in the NoFlo DSL because we’d need to
pass a function (&lt;code class=&quot;highlighter-rouge&quot;&gt;process.exit&lt;/code&gt;) to the callback component, but there is no
syntax to do that. So, let’s just quickly write an &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; component to solve
this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;noflo = require &quot;noflo&quot;

class Eval extends noflo.Component
  description: &quot;Send the evaluated input to the output&quot;
  constructor: -&amp;gt;
    @inPorts  = {in:  new noflo.Port 'string'}
    @outPorts = {out: new noflo.Port 'all'}
    @inPorts.in.on &quot;data&quot;, (data) =&amp;gt;
      @outPorts.out.send eval(data)
    @inPorts.in.on &quot;disconnect&quot;, =&amp;gt;
      @outPorts.out.disconnect()

exports.getComponent = -&amp;gt; new Eval()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After &lt;a href=&quot;http://bergie.iki.fi/blog/distributing-noflo-components/&quot;&gt;adding that to our package.json&lt;/a&gt;, we can now use it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'process.exit' -&amp;gt; IN Eval(Eval)
Eval OUT -&amp;gt; CALLBACK Kill(core/Callback)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll need to trigger Kill once we printed 10 lines. I couldn’t really figure
out how to connect it directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;packets/Range&lt;/code&gt;, so I just used
a counter. This leaves us with the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Read(filesystem/ReadFile) OUT -&amp;gt; IN Split(strings/SplitStr)
Split OUT -&amp;gt; IN Filter(strings/Filter) 
Filter OUT -&amp;gt; IN Head(packets/Range)
Head OUT -&amp;gt; IN Display(core/Output)
Head OUT -&amp;gt; IN Counter(flow/CountDown)

'^a' -&amp;gt; PATTERN Filter

'10' -&amp;gt; LENGTH Head
'10' -&amp;gt; COUNT Counter

'process.exit' -&amp;gt; IN Eval(Eval)
Eval OUT -&amp;gt; CALLBACK Kill(core/Callback)
Counter OUT -&amp;gt; IN Kill

'/dev/stdin' -&amp;gt; IN Read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, that doesn’t solve the problem. Something in the pipeline
still blocks until it read everything. So, &lt;code class=&quot;highlighter-rouge&quot;&gt;packets/Range&lt;/code&gt; isn’t
even receiving any data.&lt;/p&gt;

&lt;p&gt;As far as I can tell, the problem here is node’s &lt;code class=&quot;highlighter-rouge&quot;&gt;fs.readFile&lt;/code&gt;
(used in NoFlo’s &lt;code class=&quot;highlighter-rouge&quot;&gt;filesystem/ReadFile&lt;/code&gt;),
which seems to not pass any data to the callback before it read
the complete file. So that’s stupid, but fixable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fs = require &quot;fs&quot;
noflo = require &quot;noflo&quot;

class ReadByte extends noflo.AsyncComponent
  description: &quot;Read single bytes from a file&quot;

  constructor: -&amp;gt;
    @inPorts =
      in: new noflo.Port()
    @outPorts =
      out: new noflo.Port()
      error: new noflo.Port()
    super()
    @inPorts.in.on &quot;disconnect&quot;, =&amp;gt;
      @outPorts.out.disconnect()

  doAsync: (filename, callback) -&amp;gt;
    buf = new Buffer 1
    fd = fs.openSync filename, 'r'
    fs.read fd, buf, 0, 1, null, (err, bytesRead, buffer) =&amp;gt;
      return callback err if err?
      @outPorts.out.send buffer.toString()
      @outPorts.out.disconnect()
      fs.close(fd)
      setTimeout () =&amp;gt;
        @doAsync filename, callback
      , 0
exports.getComponent = -&amp;gt; new ReadByte()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is laughingly inefficient, but fuck it. At this point it’s
pretty much clear that I’m on the wrong path. But I can’t figure
out the right one. And I still think that &lt;code class=&quot;highlighter-rouge&quot;&gt;grep foo | head&lt;/code&gt; is something
that NoFlo should be able to do.&lt;/p&gt;

&lt;p&gt;So, hacking on:&lt;/p&gt;

&lt;p&gt;Using the above component instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;filesystem/ReadFile&lt;/code&gt; &lt;em&gt;would&lt;/em&gt;
make the whole thing work, if it wasn’t for &lt;code class=&quot;highlighter-rouge&quot;&gt;strings/SplitStr&lt;/code&gt; which
isn’t build for single-character data.&lt;/p&gt;

&lt;p&gt;So here’s a thing that splits a stream of chars into lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;noflo = require &quot;noflo&quot;

class StreamSplit extends noflo.Component
  description: &quot;Split the input into lines&quot;

  constructor: -&amp;gt;
    @inPorts  = {in:  new noflo.Port 'string'}
    @outPorts = {out: new noflo.Port 'all'}
    @cur = ''
    @inPorts.in.on 'data', (data) =&amp;gt;
      for c in data.split()
        if c != '\n'
          @cur += c
        else
          @outPorts.out.send @cur
          @cur = ''

    @inPorts.in.on &quot;disconnect&quot;, =&amp;gt;
      @outPorts.out.disconnect()
exports.getComponent = -&amp;gt; new StreamSplit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wiring it all up:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Read(ReadByte) OUT -&amp;gt; IN Split(StreamSplit)
Split OUT -&amp;gt; IN Filter(strings/Filter) 
Filter OUT -&amp;gt; IN Head(packets/Range)
Head OUT -&amp;gt; IN Display(core/Output)
Head OUT -&amp;gt; IN Counter(flow/CountDown)

'^a' -&amp;gt; PATTERN Filter

'10' -&amp;gt; LENGTH Head
'10' -&amp;gt; COUNT Counter

'process.exit' -&amp;gt; IN Eval(Eval)
Eval OUT -&amp;gt; CALLBACK Kill(core/Callback)
Counter OUT -&amp;gt; IN Kill

'/dev/stdin' -&amp;gt; IN Read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it works!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ (cat /usr/share/dict/words; cat) | ./node_modules/.bin/noflo graphs/GrepHead.fbp
a
aa
aal
aalii
aam
aardvark
aardwolf
aba
abac
abaca
cat: write error: Broken pipe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s still inefficient, though - there’s more data read from the file than
needed.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So the first lesson I draw from this is to avoid all that and just don’t
bother with NoFlo for anything stream-based. Which is weird because
NoFlo &lt;em&gt;should&lt;/em&gt; be perfect for that kind of stuff.&lt;/p&gt;

&lt;p&gt;Maybe re-creating shell semantics is just not something one should
try to do. But I really think that the standard components should
be built to support data streams. The connect/disconnect stuff
seems weird to me. I probably just don’t understand it right,
but I also can’t find an explanation. Now, I’m not saying that the
above clusterfuck is the only solution - I’m sure there are better
ways. But it &lt;em&gt;is&lt;/em&gt; quite obvious that the standard library is broken
if you want to handle byte streams.&lt;/p&gt;

&lt;p&gt;The second lesson is that I probably need to read NoFlo’s source.&lt;/p&gt;</content><author><name></name></author><summary type="html">Playing with NoFlo a bit, currently. It’s a flow-based programming environment in JavaScript. It might not be apparent from this post but I do quite like it. Data-flow programming is probably not much of an improvement if you start with a sane language. But since JavaScript is a rotten piece of shit all the way through, NoFlo actually improves things considerably.</summary></entry><entry><title type="html">Test Driven Development</title><link href="http://0.0.0.0:4000/blog/test-driven" rel="alternate" type="text/html" title="Test Driven Development" /><published>2014-03-12T00:00:00+00:00</published><updated>2014-03-12T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/test-driven</id><content type="html" xml:base="http://0.0.0.0:4000/blog/test-driven">&lt;p&gt;It’s hard to argue against TDD because that is often construed as arguing
against software testing itself.&lt;/p&gt;

&lt;p&gt;I guess there are actually people who think that &lt;em&gt;all testing&lt;/em&gt; is bollocks, but
I am not one of them. I think that there’s value in regression and acceptance
testing. Yet I still think that TDD is absolutely the wrong way to go. I’ll
try and explain that opinion.&lt;/p&gt;

&lt;p&gt;I will try and &lt;em&gt;not&lt;/em&gt; bring up any arguments that boil down to “if you’re being
stupid, TDD doesn’t help”. Sometimes people claim that TDD makes software
development easier. But “easy” is a big concept and I assume they don’t mean
“follow that one weird trick and your programs will always work”. Nobody can
expect any software development technique to help &lt;em&gt;so much&lt;/em&gt; that you can switch
your brain off - and I don’t expected that from TDD.&lt;/p&gt;

&lt;p&gt;The object of TDD is the unit, and the unit test. That is not necessarily
always true, one could theoretically do test driven development against
higher-level functional tests. But since one of the claims pro TDD is that it
makes the code itself better, and since we write programs by typing in one unit
of code after another (roughly), I think it’s fair to say that the unit is the
canonical choice for TDD.&lt;/p&gt;

&lt;p&gt;So TDD starts out with a simple test. That test fails, so then there’s code
being written to satisfy the test. Then add another test and so on.&lt;/p&gt;

&lt;p&gt;The usual claim is that, by going by that method, you’re going to end up with a
testable (hence well-designed), and well-tested unit of code.&lt;/p&gt;

&lt;p&gt;In my opinion there are a few things wrong with that claim.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;testable does not equal well-designed&lt;/strong&gt;. In fact, testability and
well-designed-ness of code are completely orthogonal. Yes, an easily
unit-testable class is probably better than &lt;em&gt;the same class&lt;/em&gt; with a design that
prohibits unit-testing. But it’s only exactly that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The class might be completely unnecessary. This is a particularly common
oversight. The functionality might already exist elsewhere. Or the class might just
not &lt;em&gt;do anything&lt;/em&gt; worthwhile at all. TDD doesn’t help here. In fact, it even
hurts. With the writing of a unit test for that useless class it cements it
into the system. You wouldn’t throw that well-tested class away, now
would you?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The class might make assumptions about the context that aren’t valid.
A common thing to “demo” TDD  itself is to write a function that generates the
Fibonacci sequence in test-driven style. Obviously, it’s a demo of a concept
and not part of a mathematical library but even so - most implementations will
recurse into a stack overflow, and generally be slow as molasses. Because
they’re simplistic, and that’s fine. Except when it’s not.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That part, the &lt;em&gt;wrong approach, try again&lt;/em&gt; part of software development, is
completely ignored by TDD. Sometimes you’d even hear that wrong approaches just
don’t happen with TDD (which is so obviously ignorant it hurts). Other times,
TDD proponents will lean on the good code coverage their approach generates.
This supposedly makes rewriting the code easy and - most of all - save.&lt;/p&gt;

&lt;p&gt;So that’s the next topic: code coverage.&lt;/p&gt;

&lt;p&gt;There are a couple of ways to measure code coverage. And there’s the nice
buzz word of “100% code coverage”.&lt;/p&gt;

&lt;p&gt;Yes, there &lt;em&gt;is&lt;/em&gt; such a thing as 100% coverage. For example, you can exhaustively
test the addition of two 32 bit integers by writing 18446744073709551616 tests.
But since running those tests would take a few years, I think we can conclude
that exhaustive testing isn’t practical. &lt;strong&gt;With exhaustive testing also dies the
idea of “100% code coverage”&lt;/strong&gt;. What do people even measure to come to the
incredibly stupid conclusion that they are testing 100% of anything?&lt;/p&gt;

&lt;p&gt;In the PHP world, when people say “100%”, they mean
“100% lines of code” because that’s what the main PHP testing tool puts out.
Other environments will have other conventions - slightly different stupidity
of the same magnitude.&lt;/p&gt;

&lt;p&gt;Line-based, and token-based, coverage measurement is easily debunked by
changing the &lt;em&gt;value&lt;/em&gt; of the things the tokens stand for. In other words:
if the program is using variables, constants, or symbols of any kind, a lexical
approach to coverage-measurement won’t tell you anything. Your tests &lt;em&gt;may&lt;/em&gt; cover
the whole space of possible tests (unlikely, see integer example above), or
they may just cover a tiny portion of it.&lt;/p&gt;

&lt;p&gt;Branch coverage is a stronger measurement, since that at least has a runtime
portion to it. But what is a branch? Do you count every single jump-if-zero on
the CPU level? Do you count fall-through cases in switch-case statements? Do
you count vtables and dynamic dispatch systems? Obviously, &lt;em&gt;even if&lt;/em&gt; that is
all factored-in: you still don’t know if you are really covering 100%. Many
common sources of bugs - integer overflows, buffer overruns, off-by-one errors
of all kinds - are still easily achieved with 100% branch coverage.&lt;/p&gt;

&lt;p&gt;And then there’s “100% of all functions or methods called” - well, you’re not
even trying, are you?&lt;/p&gt;

&lt;p&gt;So that kind of “coverage” (and even “more coverage than before”) doesn’t tell
you &lt;em&gt;shit&lt;/em&gt; about how save it is to refactor that code. It doesn’t tell you
anything about &lt;em&gt;what&lt;/em&gt; is tested, how it’s tested, and whether or not that all
makes sense. It doesn’t tell you if you’re going to be lucky and break your new
code in exactly such a way that a test catches it. Increased “coverage” does
not imply increased safety. Not at all.&lt;/p&gt;

&lt;p&gt;Aside: this has a social/cognitive dimension, too. If you believe that what
you’re doing is save because of bogus measurements of test effectiveness, that
can actually be more dangerous than not having any tests at all. If there are
no tests then it’s clear that your brain is the thing that will have to make it
work. So you have to &lt;em&gt;think&lt;/em&gt; about what you’re doing, and how it affects the
system. If, however, you &lt;em&gt;believe&lt;/em&gt; that the tests catch you, you’re probably
going to be a little more sloppy. It’s like a handrail that’s not bolted on
properly. If people lean on it, that can easily be more dangerous than not
having a handrail at all.&lt;/p&gt;

&lt;p&gt;But TDD proponents being ignorant is one thing. What &lt;em&gt;really&lt;/em&gt; bugs me about
this is that the “100% coverage” story is what programming is all about.&lt;/p&gt;

&lt;p&gt;This is the fundamental &lt;em&gt;thing&lt;/em&gt; about programming: there are
umpteen-million-billion cases, and &lt;em&gt;we just cannot try them all&lt;/em&gt;. We do not,
and we &lt;em&gt;can not&lt;/em&gt; know if that program will even halt.&lt;/p&gt;

&lt;p&gt;And coming into that fundamental problem of computer programming, coming to
people who &lt;em&gt;all&lt;/em&gt; work around it in various clever ways, with a “solution” that
basically says “I know, we’ll just ignore it” - that, my friend, that makes
me angry.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What we ought to do instead is trying to make sure our programs are correct by
making it easy to reason about them. Patiently write our regression tests for
every reported bug. Write acceptance tests, automated integration tests, that
make sure that at least the common paths through the whole thing still work.&lt;/p&gt;

&lt;p&gt;And not claim that this is the silver bullet that kills all bugs.&lt;/p&gt;

&lt;p&gt;Dijkstra:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Testing shows the presence, not the absence of bugs.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">It’s hard to argue against TDD because that is often construed as arguing against software testing itself.</summary></entry><entry><title type="html">Given When Then</title><link href="http://0.0.0.0:4000/blog/gherkin" rel="alternate" type="text/html" title="Given When Then" /><published>2013-10-27T00:00:00+00:00</published><updated>2013-10-27T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/gherkin</id><content type="html" xml:base="http://0.0.0.0:4000/blog/gherkin">&lt;p&gt;&lt;a href=&quot;https://github.com/cucumber/cucumber/wiki/Gherkin&quot;&gt;Gherkin&lt;/a&gt; is a hack.&lt;/p&gt;

&lt;p&gt;Gherkin is the “language” (I’ll justify the use of scare-quotes in a minute)
used by the &lt;a href=&quot;https://github.com/cucumber/cucumber&quot;&gt;Cucumber&lt;/a&gt; test framework.
Or, if you’re using PHP, the language behind the PHP port &lt;a href=&quot;http://behat.org/&quot;&gt;behat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tests usually look something like this (example lifted straight from cucumber’s docs):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Feature: Serve coffee
  In order to earn money
  Customers should be able to 
  buy coffee at all times

  Scenario: Buy last coffee
    Given there are 1 coffees left in the machine
    And I have deposited 1$
    When I press the coffee button
    Then I should be served a coffee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which &lt;em&gt;is&lt;/em&gt; very nice. Having tests that are as easily readable as this
is obviously fantastic!&lt;/p&gt;

&lt;p&gt;What is not nice is how it’s implemented. What is even less nice, is how it’s
sold as a “business readable, domain specific language”. I can live very well
with crude hacks, as long as the README states “it’s a crude hack”. Glancing
over obvious limitations in exchange for marketing slogans bothers me, however.
Among programmers, we should be honest first.&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;intro&lt;/h2&gt;

&lt;p&gt;Let’s step through the test above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Feature: Serve coffee
  In order to earn money
  Customers should be able to 
  buy coffee at all times
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This whole block is just a comment and subsequently ignored. You have to
have one of those at the top of your files, and the block below &lt;code class=&quot;highlighter-rouge&quot;&gt;Feature&lt;/code&gt; has
to be indented, however.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Scenario: Buy last coffee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another comment. Now comes the actual executable code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given there are 1 coffees left in the machine
And I have deposited 1$
When I press the coffee button
Then I should be served a coffee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every line here is a “step”, and every step does something.&lt;/p&gt;

&lt;h2 id=&quot;assertions-and-instructions&quot;&gt;assertions and instructions&lt;/h2&gt;

&lt;p&gt;Even thought there are semantic differences between sentences beginning with
with &lt;code class=&quot;highlighter-rouge&quot;&gt;Given&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;When&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Then&lt;/code&gt; in English, they are all the same thing in Gherkin.&lt;/p&gt;

&lt;p&gt;Suppose the first sentence&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given there are 1 coffees left in the machine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sets up the machine to have 1 coffees [sic!] left. You start to run into problems
once you now write a different test where the &lt;em&gt;outcome&lt;/em&gt; should be that the
machine has one coffee left. Say, something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given there are 2 coffees left in the machine
When I order one coffee
Then there are 1 coffees left in the machine.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perfectly reasonable for a human, but for Gherkin this translates to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set up the machine to have 2 coffees left
order one coffee
set up the machine to have 1 coffee left
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is not only not right, it’s not even wrong. This test will
run and it will run &lt;em&gt;successfully&lt;/em&gt; every time.&lt;/p&gt;

&lt;p&gt;What Gherkin wants you to write is something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given there are 2 coffees left in the machine
When I order one coffee
Then there should be 1 coffees left in the machine.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that the programmers can implement the “there should be” sentence as an assertion,
and the “there are” sentence as a instruction. Why is this difference not
handled via the &lt;code class=&quot;highlighter-rouge&quot;&gt;Given&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Then&lt;/code&gt; keywords? Who knows.&lt;/p&gt;

&lt;p&gt;This minimalism/stupidity in Gherkin’s approach to parsing results in a
programming language with extremely low orthogonality. In fact, there’s none at
all. If you come across a step like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given there are 1 coffees left in the machine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this does &lt;em&gt;not&lt;/em&gt; guarantee at all that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there’s a step &lt;code class=&quot;highlighter-rouge&quot;&gt;Given there are 2 coffees left in the machine&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;there’s a step &lt;code class=&quot;highlighter-rouge&quot;&gt;Given there are 1 cappuccinos left in the machine&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;there’s a step &lt;code class=&quot;highlighter-rouge&quot;&gt;Then there should be 1 coffees left in the machine&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think this is pretty confusing, &lt;em&gt;especially&lt;/em&gt; for non-programmers.
Also, depending on how you write your regexps, the step above is distinct from
all of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Given there are 1 coffees  left in the machine&lt;/li&gt;
  &lt;li&gt;Given there are 1 coffees left in the machine.&lt;/li&gt;
  &lt;li&gt;Given there are 1 coffees left in the machine!&lt;/li&gt;
  &lt;li&gt;Given there are 1 coffee left in the machine&lt;/li&gt;
  &lt;li&gt;Given there is 1 coffee left in the machine&lt;/li&gt;
  &lt;li&gt;Given there is one coffee left in the machine&lt;/li&gt;
  &lt;li&gt;Given there are 1 coffees left&lt;/li&gt;
  &lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is easily traceable back to the simplistic implementation, but that doesn’t
help anyone. Gherkin is aimed at non-technical folk - and it’s syntactically
&lt;em&gt;less&lt;/em&gt; forgiving than JavaScript! In terms of human-friendliness of the
syntax it’s comparable to the older fixed-format versions of FORTRAN.&lt;/p&gt;

&lt;p&gt;In other words: Gherkin is (or can be) nice to read, but it’s &lt;em&gt;extremely&lt;/em&gt;
unfriendly to write.&lt;/p&gt;

&lt;h2 id=&quot;2-problems&quot;&gt;2 problems&lt;/h2&gt;

&lt;p&gt;Let’s talk about the implementation. Gherkin is regexp-based&lt;/p&gt;
&lt;strike&gt;because that's an absolutely reasonable choice for parsing a natural language&lt;/strike&gt;
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;So, for every “step”, you have a regexp with some code behind it, that implements
this step. It looks something like this (in cucumber, behat is a bit more verbose):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given /I have deposited (\d+)\$/ do |n|
    @machine.deposit(n)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In other words: there is no Gherkin language. At all. Gherkin is a lexical scanner,
nothing more. The parser (regexps) and evaluator (associated code) is solely in
your hands to implement. And because Gherkin limits you to per-line regexps,
the resulting Gherkin-based DSL is &lt;em&gt;less&lt;/em&gt; capable than pretty much anything
you could’ve come up with yourself.&lt;/p&gt;

&lt;p&gt;In behat at least (I assume it’s the same in cucumber), there’s also no way to
stack regexps. Every step has to match exactly &lt;em&gt;one&lt;/em&gt; regexp.  What that means
is that you can’t special-case steps, and you can’t override them. (Well, you
can, but it’s extremely hacky).&lt;/p&gt;

&lt;p&gt;There are other limitations: It’s not possible to use the “language” itself
to extend its functionality. You can’t write new Gherkin steps in Gherkin.
(Again, technically the last sentence is wrong. You &lt;em&gt;can&lt;/em&gt; do that but you’d have
to implement it yourself and Gherkin won’t help you.)&lt;/p&gt;

&lt;h2 id=&quot;overtaken-by-a-pdp-6&quot;&gt;overtaken by a PDP-6&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://hci.stanford.edu/~winograd/shrdlu/&quot;&gt;shrdlu&lt;/a&gt; program was much ahead of
its time, and I’m not saying that its approach to natural language understanding
would have been a good one for Gherkin to take in general.&lt;/p&gt;

&lt;p&gt;However, at least one feature would be an obvious improvement to Gherkin,
and not that hard to implement: The whole notation of context.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;When I type &quot;foo&quot; into the password box
Then it should change its color to red
And next to it &quot;Your password is too short&quot; should appear.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; do something like that in Gherkin today but you’d have to implement
it yourself. Which might not be that surprising at this point. Gherkin does
almost nothing - Gherkin &lt;em&gt;is&lt;/em&gt; almost nothing.&lt;/p&gt;

&lt;p&gt;It’s just a small hack.&lt;/p&gt;

&lt;h2 id=&quot;bonus&quot;&gt;bonus&lt;/h2&gt;

&lt;p&gt;Here’s an implementation of the core of Gherkin in ~30 lines of Racket:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;racket&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*steps*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define-syntax-rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define-syntax-rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*steps*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full-match&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define-syntax-rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define-syntax-rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trim-step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;regexp-replaces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-trim&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#rx&quot;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Given|And|Then|When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&quot;])))

(define (match-step s r) (regexp-match r (trim-step s)))

(define (find-step s)
  (define found (findf (compose (curry match-step s) car) *steps*))
  (if found
    (values (car found) (cdr found))
    (values #f #f)))

(define (run-step step)
  (displayln step)
  (define-values (step-regexp step-fn) (find-step step))
  (if step-fn
    (with-handlers ([exn:fail? (lambda (e) (printf &quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FAILED:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~a\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exn-message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step-fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step-regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\tStep not implemented. Implement with something like:\n\t~s\n\n&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trim-step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;whatever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run-feature&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for-each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;run-step&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-split&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step implementations would look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;;; utilities
(require net/url)
(define *content* &quot;&quot;)
(define (GET url)
  (call/input-url (string-&amp;gt;url url) get-pure-port
    (lambda (p) (set! *content* (port-&amp;gt;string p)))))

;;; steps

(Given &quot;^I am on '([^']*)'$&quot; (url) (GET url))

(Then &quot;^I should see '([^']*)'$&quot; (text)
  (unless (regexp-match? (regexp text) *content*)
    (error &quot;Text not found&quot;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’d run it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-&amp;gt; (run-feature &quot;
  Given I am on 'http://example.com'
   Then I should see 'Example Domain'
&quot;)

Given I am on 'http://example.com'
 Then I should see 'Example Domain'

-&amp;gt; (run-feature &quot;
  Given I am on 'http://example.com'
   Then I should see 'Foobar'
&quot;)

Given I am on 'http://example.com'
 Then I should see 'Foobar'
FAILED: Text not found

-&amp;gt; (run-feature &quot;
  Given I am on 'http://example.com'
  Then everything should work
&quot;)

Given I am on 'http://example.com'
Then everything should work
    Step not implemented. Implement with something like:
    (Given &quot;everything should work&quot; () (do whatever))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s just a hack. A nice one, maybe - but just a hack nonetheless.&lt;/p&gt;</content><author><name></name></author><summary type="html">Gherkin is a hack.</summary></entry><entry><title type="html">ownCloud</title><link href="http://0.0.0.0:4000/blog/owncloud" rel="alternate" type="text/html" title="ownCloud" /><published>2013-09-14T00:00:00+00:00</published><updated>2013-09-14T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/owncloud</id><content type="html" xml:base="http://0.0.0.0:4000/blog/owncloud">&lt;p&gt;So I looked at &lt;a href=&quot;http://owncloud.org/&quot;&gt;ownCloud&lt;/a&gt; this week.&lt;/p&gt;

&lt;p&gt;The install was pretty much hassle-free, as you would expect from a PHP
application. And the web frontend is pretty nice (though extremely slow, at
least on my AMD Sempron server). There’s a photo gallery, and direct media
streaming, and zip downloads, and generally a lot of good stuff in there. The
feed reader (in “Apps”, not enabled by default) works quite well, and you can
get Android apps to sync your contacts and so on. The Linux sync client is a
bit of a PITA, since the whole thing locks up if you cancel an in-progress
sync. But you can define arbitrary remote-directory to local-directory mappings so
that’s pretty nice.&lt;/p&gt;

&lt;p&gt;So it’s all fun and games and works well enough - but then there’s the whole
security issue, the “escape from the NSA” thing. And that’s where things start
to fall apart.&lt;/p&gt;

&lt;h2 id=&quot;useless-encryption&quot;&gt;useless encryption&lt;/h2&gt;

&lt;p&gt;OwnCloud does have an “encryption” option (in “Apps”, not enabled by default)
but it’s utterly useless.&lt;/p&gt;

&lt;p&gt;The only scenario where the built-in encryption helps a little bit is when
someone gets direct access to your data directory, &lt;em&gt;without&lt;/em&gt; directly breaking
into the server. (The standard ownCloud install puts your data directory
under the www root, so this can actually happen if you’re not careful).&lt;/p&gt;

&lt;p&gt;If you have encryption enabled, the bad guys won’t be able to get the actual
contents of your files. They will, however, be able to see the file size
and file names. Good luck explaining to the NSA that the 450KB file named
&lt;code class=&quot;highlighter-rouge&quot;&gt;leaks/nsa/prism-presentation.pdf&lt;/code&gt; actually contains only a picture of
a penguin.&lt;/p&gt;

&lt;p&gt;So there’s that - and there’s the other thing that with ownCloud you have to
&lt;em&gt;absolutely&lt;/em&gt; trust your system administrator. An evil system administrator
could easily record your password when you log in and then go on and decrypt
all of your data.&lt;/p&gt;

&lt;p&gt;Now, who’s “your system administrator”? If you rented a server, VPS, or
shared hosting account it’s you and your hosting provider. If you rented
space from an ownCloud provider, it’s them and their hosting provider.
If the server is located in the USA or UK this also includes the NSA/GCHQ. In
most countries the police can seize your server, so include them too. Plus the
people at the data center.&lt;/p&gt;

&lt;p&gt;Note that even encrypting your whole hard drive wouldn’t help here
because the other side has physical access to the running system.&lt;/p&gt;

&lt;p&gt;So it’s &lt;em&gt;not&lt;/em&gt; NSA-proof, not by a long shot. And that’s not even a bug
that could be fixed: the only way to securely store data on a server
is to decrypt &lt;em&gt;only&lt;/em&gt; on the client-side (given you trust the client).&lt;/p&gt;

&lt;p&gt;Something like OwnCloud could, theoretically, do that by implementing encryption
and decryption in JavaScript - so that only encrypted data ever hits the server.
This would obviously slow down the whole thing a lot and (probably) make
media streaming too slow to be practical. But at least for contacts and the
calender this could work.&lt;/p&gt;

&lt;p&gt;But that’s all theory because ownCloud doesn’t do any of that and just assumes
you can trust the server since it’s “yours” (as in “you rented it”). An
assumption that’s getting less and less valid, lately.&lt;/p&gt;

&lt;h2 id=&quot;as-secure-as-wordpress&quot;&gt;as secure as wordpress&lt;/h2&gt;

&lt;p&gt;OwnCloud has a built-in updater, and a built-in “app store” for extensions.  It
also had &lt;a href=&quot;http://owncloud.org/about/security/advisories/&quot;&gt;multiple XSS, SQL-injection, and code execution
vulnerabilities&lt;/a&gt;, which, quite
frankly, means that they did’t follow modern software engineering practices.&lt;/p&gt;

&lt;p&gt;Being open to CSRF attacks (which it was, too) is &lt;em&gt;kind of&lt;/em&gt; excusable - most
PHP web frameworks don’t help you with that by default. But there is no excuse
for SQL-injection or arbitrary code execution in a modern PHP app - other than
“they don’t know what they are doing”.&lt;/p&gt;

&lt;p&gt;Just to mention it explicitly: in the case of an exploitable security hole &lt;em&gt;in
ownCloud itself&lt;/em&gt;, the list of people you implicitly trust with all your data
automatically grows to “the whole internet”. That’s the magic of the cloud! :-)&lt;/p&gt;

&lt;h2 id=&quot;as-secure-as-wordpress-part-2&quot;&gt;as secure as wordpress, part 2&lt;/h2&gt;

&lt;p&gt;So, you could, in theory, audit the code. But there’s the next problem: this
thing is &lt;em&gt;big&lt;/em&gt;. Big parts of the code are more-or-less well known pieces of software,
like the &lt;a href=&quot;https://en.wikipedia.org/wiki/SabreDAV&quot;&gt;SabreDAV server&lt;/a&gt;, but still.&lt;/p&gt;

&lt;p&gt;See how that one “simple install” grew to an extremely large TODO list item?
Yeah, you might as well pick the features you need and implement those parts
yourself, in an easily manageable fashion. At least that’s my conclusion.&lt;/p&gt;

&lt;p&gt;Though I probably won’t manage to make a frontend as nice as ownCloud’s…&lt;/p&gt;</content><author><name></name></author><summary type="html">So I looked at ownCloud this week.</summary></entry><entry><title type="html">Racket Appreciation Day</title><link href="http://0.0.0.0:4000/blog/racket-appreciation-day" rel="alternate" type="text/html" title="Racket Appreciation Day" /><published>2013-07-23T00:00:00+00:00</published><updated>2013-07-23T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/racket-appreciation-day</id><content type="html" xml:base="http://0.0.0.0:4000/blog/racket-appreciation-day">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #lang racket
 (require net/url)
 (port-&amp;gt;string
   (get-pure-port
     (string-&amp;gt;url &quot;http://r-wos.org&quot;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Racket Appreciation Day was today, for me. I tried writing a small script
that reads from Github’s API and displays a list
of “@mentions” in &lt;a href=&quot;http://www.gnu.org/software/guile/&quot;&gt;Guile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
(Why Guile? Well, the short version of the story is
that I’d like to run this program on my &lt;a href=&quot;http://en.qi-hardware.com/wiki/Ben_NanoNote&quot;&gt;Ben NanoNote&lt;/a&gt;
since I have that machine lying around for quite some time now,
looking for something, &lt;em&gt;anything&lt;/em&gt; to use it for.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The NanoNote comes with Guile. It also comes with Python, Bash,
GForth and Lua, and I could probably cross-compile Racket for it
(it’s a MIPS CPU), but yeah - I thought writing something in Guile
would be interesting.)
&amp;lt;/small&amp;gt;&lt;/p&gt;

&lt;p&gt;And Guile &lt;em&gt;is&lt;/em&gt; quite nice, as a language - but some things
still made me miss &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Examples are: local &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;let-values&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;port-&amp;gt;string&lt;/code&gt;, Racket’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop forms, and the quality of the documentation:
Guile’s docs don’t include the return value in the function signature - 
you have to parse the prose around it for that information. Not nice.&lt;/p&gt;

&lt;p&gt;But what triggered this post is Guile’s absolutely &lt;em&gt;stupid&lt;/em&gt; HTTP client.
It’s reasonably easy to use, and generally works, except that it
&lt;em&gt;verifies&lt;/em&gt; the response headers.&lt;/p&gt;

&lt;p&gt;What the fuck?! Since when are the receiving ends of clients in a
network supposed to play the RFC-Nazi role? Or the receiving end
of anything, really: “Be conservative in what you send, be liberal
in what you accept”, isn’t that the networking credo?&lt;/p&gt;

&lt;p&gt;Well, not so with Guile’s HTTP client. This one throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bad Header&lt;/code&gt; exception
and trashes the response if the server decided to send something that isn’t
part of some RFC. And, as if that wasn’t bad enough, it also throws
for basically everything with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Location&lt;/code&gt; header. As an example,
it refuses to accept the response you’ll get after
requesting &lt;a href=&quot;http://r-wos.org&quot;&gt;http://r-wos.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Okay, so now I have two options. Either I write my own &lt;code class=&quot;highlighter-rouge&quot;&gt;http-get&lt;/code&gt; - which means
basically writing in C, except slower, and with more parentheses.
Or I use &lt;code class=&quot;highlighter-rouge&quot;&gt;(system &quot;curl ...&quot;)&lt;/code&gt;. Not nice, part two.&lt;/p&gt;

&lt;p&gt;So here’s my tip of the day: use Racket if you can.&lt;/p&gt;

&lt;p&gt;And just use Python or something, if you can’t.&lt;/p&gt;</content><author><name></name></author><summary type="html">#lang racket (require net/url) (port-&amp;gt;string (get-pure-port (string-&amp;gt;url &quot;http://r-wos.org&quot;)))</summary></entry><entry><title type="html">wtf.js</title><link href="http://0.0.0.0:4000/blog/wtf-js" rel="alternate" type="text/html" title="wtf.js" /><published>2013-07-09T00:00:00+00:00</published><updated>2013-07-09T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/wtf-js</id><content type="html" xml:base="http://0.0.0.0:4000/blog/wtf-js">&lt;p&gt;Playing with node.js currently, and I don’t grok it. I’m passable (not “good”,
just passable) in JavaScript but I don’t get why anyone would ever want
to program in the style node.js dictates.&lt;/p&gt;

&lt;p&gt;It’s async, yeah. &lt;em&gt;Only&lt;/em&gt; async. And async without language-level promises, or
channels, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;. Or multi-processing. Or anything really. They basically write in
continuation passing style. In one thread. By hand. And it wouldn’t completely
surprise me if they chiseled it in stone and OCR’d it back.&lt;/p&gt;

&lt;p&gt;If you are going backwards, you might as well go all the way.&lt;/p&gt;

&lt;p&gt;Let’s make two HTTP requests, shall we?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var result_1, result 2;
http.get(&quot;http://one.com&quot;,
  function(response) {
    response.on('data',
      function(data) {
        result_1 = data;
        http.get(&quot;http://two.com&quot;,
          function(response) {
            response.on('data',
              function(data) {
                result_2 = data;
                // do stuff with the results
              }
            );
          }
        );
      }
    );
  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fuck? Now, there are libraries that transform that pyramid of
callbacks into a single one - but that’s just a cosmetic change. It’s
still a series of callbacks. And - as far as I understand - there is
no &lt;code class=&quot;highlighter-rouge&quot;&gt;force(promise)&lt;/code&gt; - in other words, no way to sync.&lt;/p&gt;

&lt;p&gt;Why don’t they just do it synchronously? Why is there no blocking
API? I don’t get it.&lt;/p&gt;

&lt;p&gt;Note that this doesn’t have anything to do with performance.
If I want the two requests to succeed before going on, I’ll have to
wait for them - in both async and synchronous style.&lt;/p&gt;

&lt;p&gt;The only thing that that async fuck-up buys me is that I now have
a bunch of needlessly nested scopes.&lt;/p&gt;

&lt;p&gt;Did I mention that I don’t get it?&lt;/p&gt;

&lt;p&gt;Sure, &lt;em&gt;sometimes&lt;/em&gt; it’s quite nice to do stuff asynchronously.
Maybe it’s even a good idea to make non-blocking the default.
But &lt;em&gt;only&lt;/em&gt; non-blocking APIs?&lt;/p&gt;

&lt;p&gt;Did I mention that…&lt;/p&gt;

&lt;p&gt;Oh, yeah, I think I did.&lt;/p&gt;</content><author><name></name></author><summary type="html">Playing with node.js currently, and I don’t grok it. I’m passable (not “good”, just passable) in JavaScript but I don’t get why anyone would ever want to program in the style node.js dictates.</summary></entry><entry><title type="html">CoffeeScript - Second Impressions</title><link href="http://0.0.0.0:4000/blog/second-coffeescript" rel="alternate" type="text/html" title="CoffeeScript - Second Impressions" /><published>2013-06-14T00:00:00+00:00</published><updated>2013-06-14T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/second-coffeescript</id><content type="html" xml:base="http://0.0.0.0:4000/blog/second-coffeescript">&lt;p&gt;Here’s a small raycaster in CoffeeScript. I wrote that just to see how it
would look. (There’s also a small rant at the end, if that’s what you’re
looking for.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DIST = 9; Z_STEP = 0.1; X_STEP = 2; FOV = Math.PI/3

map_at = (x, y) -&amp;gt; [
    &quot; XX&quot;
    &quot;   &quot;
    &quot;X X&quot;
    ][Math.round y]?[Math.round x] == &quot;X&quot;

move = (x, y, dist, dir) -&amp;gt; [Math.sin(dir) * dist + x,
                             Math.cos(dir) * dist + y]

cast = (x, y, dir) -&amp;gt; # optimizing for LOC, here...
    for dist in [0...DIST] by Z_STEP
        break if map_at (move x, y, dist, dir)...
    dist

clear = (canvas) -&amp;gt;
    ctx = canvas.getContext '2d'
    ctx.fillStyle = &quot;#fff&quot;
    ctx.fillRect 0, 0, canvas.width, canvas.height

draw = (canvas, col, dist) -&amp;gt;
    dist_frac = Math.min(dist, DIST)/DIST
    wall = (1-dist_frac) * canvas.height
    color = Math.round dist_frac*255
    ctx = canvas.getContext '2d'
    ctx.fillStyle = &quot;rgb(#{color}, #{color}, #{color})&quot;
    ctx.fillRect col, canvas.height/2 - wall/2, X_STEP, wall

render = (canvas, player) -&amp;gt;
    clear canvas
    for col in [0..canvas.width] by X_STEP
        view_col = (col - canvas.width/2)
        view_dir = view_col*(FOV/canvas.width)
        draw canvas, col,
             cast player.x, player.y, player.dir + view_dir

running = false
frame = -&amp;gt;
    clearInterval running
    cycle = new Date().getTime()/1000
    render document.getElementById('canvas'),
             x:   Math.sin(cycle)*6 + 1
             y:   Math.cos(cycle)*6 + 1
             dir: cycle + Math.PI # look into center
    running = setInterval frame, 20

do frame
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Result &lt;small&gt;(click through from your RSS reader if you can’t see a canvas)&lt;/small&gt;:&lt;/p&gt;

&lt;div&gt;
&lt;canvas id=&quot;canvas&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
// Generated by CoffeeScript 1.6.3
(function() {
  var DIST, FOV, X_STEP, Z_STEP, cast, clear, draw, frame, map_at, move, render, running;

  DIST = 9;

  Z_STEP = 0.1;

  X_STEP = 2;

  FOV = Math.PI / 3;

  map_at = function(x, y) {
    var _ref;
    return ((_ref = [&quot; XX&quot;, &quot;   &quot;, &quot;X X&quot;][Math.round(y)]) != null ? _ref[Math.round(x)] : void 0) === &quot;X&quot;;
  };

  move = function(x, y, dist, dir) {
    return [Math.sin(dir) * dist + x, Math.cos(dir) * dist + y];
  };

  cast = function(x, y, dir) {
    var dist, _i;
    for (dist = _i = 0; Z_STEP &gt; 0 ? _i &lt; DIST : _i &gt; DIST; dist = _i += Z_STEP) {
      if (map_at.apply(null, move(x, y, dist, dir))) {
        break;
      }
    }
    return dist;
  };

  clear = function(canvas) {
    var ctx;
    ctx = canvas.getContext('2d');
    ctx.fillStyle = &quot;#fff&quot;;
    return ctx.fillRect(0, 0, canvas.width, canvas.height);
  };

  draw = function(canvas, col, dist) {
    var color, ctx, dist_frac, wall;
    dist_frac = Math.min(dist, DIST) / DIST;
    wall = (1 - dist_frac) * canvas.height;
    color = Math.round(dist_frac * 255);
    ctx = canvas.getContext('2d');
    ctx.fillStyle = &quot;rgb(&quot; + color + &quot;, &quot; + color + &quot;, &quot; + color + &quot;)&quot;;
    return ctx.fillRect(col, canvas.height / 2 - wall / 2, X_STEP, wall);
  };

  render = function(canvas, player) {
    var col, view_col, view_dir, _i, _ref, _results;
    clear(canvas);
    _results = [];
    for (col = _i = 0, _ref = canvas.width; X_STEP &gt; 0 ? _i &lt;= _ref : _i &gt;= _ref; col = _i += X_STEP) {
      view_col = col - canvas.width / 2;
      view_dir = view_col * (FOV / canvas.width);
      _results.push(draw(canvas, col, cast(player.x, player.y, player.dir + view_dir)));
    }
    return _results;
  };

  running = false;

  frame = function() {
    var cycle;
    clearInterval(running);
    cycle = new Date().getTime() / 1000;
    render(document.getElementById(&quot;canvas&quot;), {
      x: Math.sin(cycle) * 6 + 1,
      y: Math.cos(cycle) * 6 + 1,
      dir: cycle + Math.PI
    });
    return running = setInterval(frame, 20);
  };

  frame();

}).call(this);
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Not bad, certainly more succinct than JavaScript, but …well - maybe I’ve been
writing too much Scheme lately but I’ve grown to &lt;em&gt;like&lt;/em&gt; having parentheses
around everything. Making most of the nesting implicit may &lt;em&gt;look&lt;/em&gt; cleaner,
but it feels so brittle to me. One basically relies on operator precedence,
and - somehow - that’s making me uncomfortable. (To be fair - I could
have included much more parentheses in the above code, I just thought
I’d try and go full-on crazy with CoffeeScript’s syntax).&lt;/p&gt;

&lt;p&gt;But the biggest problem I have with these significant-whitespace and
implicit-nesting languages is that they don’t go far enough: If I was to write
something like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; foo = bar x,y
       * factor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or even&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = bar x,y  * factor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a human reader would probably assume it means&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = bar(x,y) * factor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But CoffeeScript parses the second one as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = bar(x,y*factor)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and errors-out on the first one. In the same vein,
this works in CoffeeScript:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;coffee&amp;gt; (x for x in [0..3] when x != 2)
[ 0, 1, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this doesn’t:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;coffee&amp;gt; (x for x in [0..3] unless x == 2)
[ 0, 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;even though &lt;code class=&quot;highlighter-rouge&quot;&gt;unless&lt;/code&gt; is a keyword and behaves as one would expect in most other cases.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;coffee&amp;gt; x = 1 unless true is false
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I mean, one &lt;em&gt;can&lt;/em&gt; go down the &lt;strike&gt;highway to hell&lt;/strike&gt; road of “code
that looks like English sentences”, but one has to go all the way, with a real
natural language parser.  But what all of these languages - including
CoffeeScript - do is rename “&amp;amp;&amp;amp;” to “and” and replace some other symbols with
“then” and “when”. So now stuff looks like English but behaves like code -
including strange parse errors. How does that help anyone?&lt;/p&gt;

&lt;p&gt;That’s what I meant when I said “90% design” in the last post - it just doesn’t fucking
work &lt;em&gt;all&lt;/em&gt; of the time, and that’s frustrating. One man’s “why would you do &lt;em&gt;that&lt;/em&gt;?” is another
man’s “basic usage”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = 1 if true      # works

if true x = 1      # doesn't

if true then x = 1 # works

if true then       # doesn't work
    x = 1          # (parse error)
    
if true then       # &quot;works&quot;
x = 1              # (always sets x to 1)

if true            #
    x = 1          # works

if true and true   #
    x = 1          # works

if true            #
and true           # doesn't work
    x = 1          # (parse error)

if true            #
   and true        # doesn't work
    x = 1          # (different parse error)

if true and        #
   true            #
    x = 1          # works

if true and        #
    true           #
    x = 1          # doesn't (!)

if true and        #
     true          #
    x = 1          # works (!!!!!)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python would have the same problem, if it wasn’t for the fact
that stuff in parentheses is free-form there - but no such luxury in
CoffeeScript.&lt;/p&gt;

&lt;p&gt;Still, all-in-all I find CoffeeScript rather nice - it has quite a law-and-order
syntax but the execution model is unchanged from JavaScript (i.e. nice and
free). Simple things - that is, “real-world code” - seem to look better in
CoffeeScript. And (big plus) it compiles into straight-forward, readable
JavaScript.&lt;/p&gt;

&lt;p&gt;It does leave many of JavaScript’s warts unfixed (I assume this is by design),
but yeah, at least everything is an expression now and the scope behaves as it
should.&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s a small raycaster in CoffeeScript. I wrote that just to see how it would look. (There’s also a small rant at the end, if that’s what you’re looking for.)</summary></entry><entry><title type="html">CoffeeScript - First Impressions</title><link href="http://0.0.0.0:4000/blog/first-coffeescript" rel="alternate" type="text/html" title="CoffeeScript - First Impressions" /><published>2013-06-10T00:00:00+00:00</published><updated>2013-06-10T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/first-coffeescript</id><content type="html" xml:base="http://0.0.0.0:4000/blog/first-coffeescript">&lt;p&gt;Just some short notes about &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;, after
maybe 5 hours of playing with it. This is mostly about the syntax - but then
again, CoffeeScript &lt;em&gt;is&lt;/em&gt; mostly about the syntax.&lt;/p&gt;

&lt;p&gt;I like it, overall, it’s definitely a step up from JavaScript. Though it is a
bit of a “works 90% of the time” design: it quickly gets unintuitive once you
come to the corner-cases. There’s a bit too much implicit stuff in the syntax
for my taste - but it’s certainly pretty clean and
noise-free (at least in simple cases).&lt;/p&gt;

&lt;p&gt;Nice features include:&lt;/p&gt;

&lt;p&gt;Function application chains can be written without parentheses:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo a         # like foo(a)
foo a b c d   # like foo(a(b(c(d))))
foo a b,c,d   # like foo(a(b, c, d))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it basically gives you an automatic &lt;code class=&quot;highlighter-rouge&quot;&gt;compose&lt;/code&gt; - it doesn’t, however, do an
automatic &lt;code class=&quot;highlighter-rouge&quot;&gt;curry&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = (a, b) -&amp;gt; a+b   # like foo = function(a, b) {return a+b;}
foo a                 # could/should return &quot;(b) -&amp;gt; a+b&quot; but doesn't
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, combined with some of the other expression-oriented syntax (especially
list-comprehensions) one can basically write arbitrarily confusing constructs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo  x  for x in [1, 2, 3]   # like foo(1); foo(2); foo(3);
foo (x) for x in [1, 2, 3]   # same as above
foo (x  for x in [1, 2, 3])  # like foo([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My first comment isn’t quite the whole truth - the whole first line is also an
expression and that expression evaluates to &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 3]&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bar(foo x for x in [1, 2, 3])
# behaves like foo(1); foo(2); foo(3); bar([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try and refactor that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result = foo x for x in [1, 2, 3]
bar(result)
# behaves like foo(1); foo(2); foo(3); bar(3) -- whoopsy!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that’s the price one has to pay for the extreme terseness.&lt;/p&gt;

&lt;h2 id=&quot;splats-1&quot;&gt;splats 1&lt;/h2&gt;

&lt;p&gt;Then, there’s a feature they call “splats”. Which is a stupid name,
but that’s because “splats” are actually three distinct features
and the name basically refers to the lexical token “…” and not to
a semantic concept.&lt;/p&gt;

&lt;p&gt;The first “…” usage is for rest-args in function definitions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = (a, b...) -&amp;gt; # b is a list

# equivalent Scheme code:
# (define (foo a . b) (#| b is a list |#))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is nice, is that (unlike in Scheme) this works not only for the last
parameters, but everywhere (where it makes sense):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = (a..., b) -&amp;gt; # a contains all but the last parameter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;splats-2&quot;&gt;splats 2&lt;/h2&gt;

&lt;p&gt;Feature number two is splicing arguments in function calls (basically syntactic
sugar for apply):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;list = [1, 2, 3]
print list       # like print([1, 2, 3])
print list...    # like print.apply(null, [1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Splicing literals and expressions works, too. And you can combine
spliced arguments with non-spliced ones - though &lt;em&gt;not&lt;/em&gt; on the REPL (at least in 1.6.3),
since it’s broken. And the last activity on &lt;a href=&quot;https://github.com/jashkenas/coffee-script/issues/2906&quot;&gt;a related bug&lt;/a&gt;
is “reopened 2 months ago”.&lt;/p&gt;

&lt;p&gt;That doesn’t quite fill me with enthusiasm for CoffeeScript, I have to say…
(The REPL is also a bit cumbersome to use - one has to manually switch
into multi-line mode in order to enter line breaks.)&lt;/p&gt;

&lt;p&gt;Some other corner-cases also work (even on the REPL, yay!):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo = -&amp;gt; [1, 2] # (function w/o arguments)
do foo          # (call that function, returns [1, 2])

print do foo    # like print([1, 2])
print do foo... # like print(1, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;splats-3&quot;&gt;splats 3&lt;/h2&gt;

&lt;p&gt;The third “splats” usage is in “destructing assignment” from lists and
objects:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[head, stuff..., tail] = [1, 2, 3, 4, 5]
# stuff will be [2, 3, 4]
# (except on the REPL, where it will fail)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s really nice, but why they use brackets on the left side of the
assignment is beyond me.  PHP does something semantically similar (&lt;code class=&quot;highlighter-rouge&quot;&gt;list(a, b,
c) = array(1, 2, 3)&lt;/code&gt;) - but that’s wrong, people! The whole &lt;em&gt;point&lt;/em&gt; about the
left side of such an assignment is that it is &lt;em&gt;not&lt;/em&gt; a list.&lt;/p&gt;

&lt;h2 id=&quot;cobol&quot;&gt;COBOL&lt;/h2&gt;

&lt;p&gt;CoffeeScript also has that whole Perl-like reverse-if stuff:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = &quot;foo&quot; if y == &quot;bar&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;strike&gt;Python has that too&lt;/strike&gt;
&lt;p&gt;&lt;small&gt;(Whoops, no, I was misremembering
here: Python only has the “&lt;code class=&quot;highlighter-rouge&quot;&gt;x = can_fail() or default_value&lt;/code&gt;” idiom)&lt;/small&gt; -
and Python also loves code that reads like simplified English sentences. But
CoffeeScript is in a whole other league:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while player isnt dead
    if key is space then jump quickly upwards unless status is jumping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given a bunch of trivial definitions, this is absolutely valid CoffeeScript
code. I don’t know if they want to win over the COBOL crowd with this
nonsense, or what is going on here. I just know I don’t like it.  (One doesn’t
&lt;em&gt;have to&lt;/em&gt; write in that pseudo-readable style, of course - though the tutorial
does make it clear that this is the preferred way to do things).&lt;/p&gt;

&lt;p&gt;As I see it, this is basically the underlying theme of CoffeeScript: syntactic cuteness.&lt;/p&gt;

&lt;p&gt;There is a syntax for array slices, in which two dots denote an inclusive end, and three dots
denote an exclusive end - cute, yes, but also a new record for the least amount of pixels that are
wrong per off-by-one error.&lt;/p&gt;

&lt;p&gt;Also, consider:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls = [0, 1, 2, 3]
ls[0..3]                    # is [0, 1, 2, 3]
ls[..]                      # is [0, 1, 2, 3]
ls[0...3]                   # is [0, 1, 2]
ls[...]                     # is [0, 1, 2, 3]
ls[0....3]                  # is []
ls[0.....3]                 # is a parse error
ls[0....999999999999999999] # is [0]
ls[0...999999999999999999]  # is [0, 1, 2, 3]
ls[0..999999999999999999]   # is [0, 1, 2, 3]
ls[0.999999999999999999]    # is 1

# bonus:
ls[..-&amp;gt;]    # is [0, 1, 2, 3]
ls[...-&amp;gt;]   # is []
ls[..&quot;3&quot;]   # is [0, 1, 2, 3]
ls[...&quot;3&quot;]  # is [0, 1, 2]
ls[..&quot;x&quot;]   # is [0, 1, 2 ,3]
ls[...&quot;x&quot;]  # is []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unlikely that a programmer would write one of the stranger examples, but if
CoffeeScript had macros, or a preprocessor, it would be quite difficult to
use. But it doesn’t. It just has cute syntax.&lt;/p&gt;

&lt;p&gt;There’s another “cute” thing, &lt;code class=&quot;highlighter-rouge&quot;&gt;?=&lt;/code&gt;, which sets a variable to a value
when the variable is undefined or null:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = null
x ?= 3 # if x is null or undefined, set it to 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But you have to declare the variable first, which kind of defeats the whole point.
If you don’t want to do that, you can use the following instead:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = x ? 3    # set x to 3 if x doesn't exist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But pay attention to not write it as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = x? 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because that always sets x to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. (No, I don’t know why.)&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; also has an accessor variant, as in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object?.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; doesn’t exist in &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;. So that’s nice,
especially for longer chains (on the other hand - longer chains of objects
returning objects aren’t exactly good code to begin with).&lt;/p&gt;

&lt;p&gt;Which brings us to the whole hash-table/object stuff, but that’s
stuff for another post.&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;</content><author><name></name></author><summary type="html">Just some short notes about CoffeeScript, after maybe 5 hours of playing with it. This is mostly about the syntax - but then again, CoffeeScript is mostly about the syntax.</summary></entry><entry><title type="html">Colored Text in wmii’s Status Bar</title><link href="http://0.0.0.0:4000/blog/wmii-color-status" rel="alternate" type="text/html" title="Colored Text in wmii's Status Bar" /><published>2013-06-08T00:00:00+00:00</published><updated>2013-06-08T00:00:00+00:00</updated><id>http://0.0.0.0:4000/blog/wmii-color-status</id><content type="html" xml:base="http://0.0.0.0:4000/blog/wmii-color-status">&lt;p&gt;Another entry without any ranting - what is this blog coming to?
In order to not &lt;em&gt;entirely&lt;/em&gt; slip into the realms of factual boringness
this one is only useful for people who use &lt;code class=&quot;highlighter-rouge&quot;&gt;wmii&lt;/code&gt; as their window manager:&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;wmii&lt;/code&gt; status bar doesn’t interpret ANSI escape codes for colors,
but one can set the colors globally for the whole bar. If one wants
to color only specific sections of the status bar, one has to divide
it into more bars.&lt;/p&gt;

&lt;p&gt;This is easily done by writing a new file into &lt;code class=&quot;highlighter-rouge&quot;&gt;/rbar&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;wmii&lt;/code&gt;’s
virtual file system. I suppose you already have your own &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; function
in your &lt;code class=&quot;highlighter-rouge&quot;&gt;wmiirc_local&lt;/code&gt; - just add something like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;status() {
    # [...]
    echo -n &quot;colors #ff0000 #000000 #000000\n&quot; \
            &quot;label this will be red&quot; | \
        wmiir create /rbar/little_red_text_bar
    # [...]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s pretty much it. The files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/rbar&lt;/code&gt; are displayed
in alphabetical order. Since the default status bar is called
&lt;code class=&quot;highlighter-rouge&quot;&gt;/rbar/status&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;little_red_text_bar&lt;/code&gt; will end up on the left
side of it.&lt;/p&gt;</content><author><name></name></author><summary type="html">Another entry without any ranting - what is this blog coming to? In order to not entirely slip into the realms of factual boringness this one is only useful for people who use wmii as their window manager:</summary></entry></feed>